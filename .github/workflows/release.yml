name: Release to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:  # Add manual trigger
    inputs:
      version:
        description: 'Version to release (optional)'
        required: false
        default: ''
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        default: false
        type: boolean

jobs:
  build-wheels:
    runs-on: ubuntu-latest
    environment: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Display release info
      run: |
        echo "üöÄ Building Linux wheels for Google Colab compatibility"
        if [ -n "${{ github.event.inputs.version }}" ]; then
          echo "üì¶ Version: ${{ github.event.inputs.version }}"
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Install cibuildwheel
      run: |
        python -m pip install --upgrade pip
        pip install cibuildwheel
    
    - name: Build Linux wheels with cibuildwheel
      env:
        CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*
        CIBW_SKIP: "*-win32 *-macosx* *-win_amd64"
        CIBW_BEFORE_BUILD_LINUX: |
          # Install system dependencies
          apt-get update && apt-get install -y cmake build-essential
          # Build OctoMap
          cd src/octomap
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          make install
          ldconfig
        CIBW_REPAIR_WHEEL_COMMAND_LINUX: |
          # Use auditwheel for Linux wheels with manylinux1 compatibility
          auditwheel repair -w {dest_dir} {wheel} --plat manylinux1_x86_64
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
        CIBW_MANYLINUX_I686_IMAGE: manylinux1
      run: |
        cibuildwheel --platform linux
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels
        path: ./wheelhouse/*.whl

  build-sdist:
    runs-on: ubuntu-latest
    environment: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel numpy cython
    
    - name: Generate PyPI README
      run: |
        python github2pypi/generate_pypi_readme.py
        
        if [ -f "README_pypi_preview.md" ]; then
          echo "‚úÖ PyPI README generated successfully"
        else
          echo "‚ùå PyPI README generation failed"
          exit 1
        fi
    
    - name: Build source distribution
      run: |
        python setup.py sdist
    
    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  publish:
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment: release
    
    steps:
    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        name: wheels
        path: ./wheelhouse
    
    - name: Download source distribution
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: ./dist
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: .