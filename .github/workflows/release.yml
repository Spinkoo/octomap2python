name: Release to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:  # Add manual trigger
    inputs:
      version:
        description: 'Version to release (optional)'
        required: false
        default: ''
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        default: false
        type: boolean

jobs:
  build-wheels:
    runs-on: ubuntu-latest
    environment: release
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Display release info
      run: |
        echo "üöÄ Building Linux wheels for Google Colab compatibility"
        echo "üêç Python version: ${{ matrix.python-version }}"
        if [ -n "${{ github.event.inputs.version }}" ]; then
          echo "üì¶ Version: ${{ github.event.inputs.version }}"
        fi
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel numpy cython auditwheel
    
    - name: Build OctoMap C++ library
      run: |
        cd src/octomap
        mkdir -p build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)
        sudo make install
        sudo ldconfig
    
    - name: Build wheel
      run: |
        python setup.py bdist_wheel
        echo "Built wheel:"
        ls -la dist/*.whl
    
    - name: Repair wheel for manylinux2014 compatibility
      run: |
        # Use auditwheel to repair for manylinux2014 (more compatible than manylinux1)
        mkdir -p wheelhouse
        
        echo "üîß Attempting manylinux2014 repair..."
        if auditwheel repair dist/*.whl --plat manylinux2014_x86_64 -w wheelhouse/ 2>&1; then
          echo "‚úÖ manylinux2014 repair successful"
        else
          echo "‚ùå manylinux2014 failed, trying manylinux1..."
          if auditwheel repair dist/*.whl --plat manylinux1_x86_64 -w wheelhouse/ 2>&1; then
            echo "‚úÖ manylinux1 repair successful"
          else
            echo "‚ùå Both repairs failed, using correct platform tag"
            # Use the platform tag that auditwheel actually suggests
            cp dist/*.whl wheelhouse/
            cd wheelhouse
            for wheel in *.whl; do
              if [[ "$wheel" == *"linux_x86_64"* ]]; then
                new_name="${wheel/linux_x86_64/manylinux_2_39_x86_64}"
                mv "$wheel" "$new_name"
                echo "Renamed to correct platform tag: $wheel -> $new_name"
              fi
            done
            cd ..
          fi
        fi
        
        # Move repaired wheel back to dist
        rm -f dist/*.whl
        cp wheelhouse/*.whl dist/
        
        echo "‚úÖ Final wheels:"
        ls -la dist/*.whl
    
    - name: Upload wheel
      uses: actions/upload-artifact@v4
      with:
        name: wheel-py${{ matrix.python-version }}
        path: dist/*.whl

  build-sdist:
    runs-on: ubuntu-22.04
    environment: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel numpy cython
    
    - name: Generate PyPI README
      run: |
        python github2pypi/generate_pypi_readme.py
        
        if [ -f "README_pypi_preview.md" ]; then
          echo "‚úÖ PyPI README generated successfully"
        else
          echo "‚ùå PyPI README generation failed"
          exit 1
        fi
    
    - name: Build source distribution
      run: |
        python setup.py sdist
    
    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  publish:
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-22.04
    environment: release
    
    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheel-py*
        path: ./artifacts
        merge-multiple: true
    
    - name: Download source distribution
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: ./artifacts
    
    - name: Organize distributions for publishing
      run: |
        # Create dist directory
        mkdir -p dist
        
        # Copy all wheels to dist directory
        echo "Copying wheels to dist directory:"
        find ./artifacts -name "*.whl" -type f -exec cp {} dist/ \;
        
        # Copy source distributions to dist directory
        echo "Copying source distributions to dist directory:"
        find ./artifacts -name "*.tar.gz" -type f -exec cp {} dist/ \;
        
        # List final distributions
        echo "Final distributions to publish:"
        ls -la dist/
        
        # Verify we have distributions
        if [ -z "$(ls -A dist/)" ]; then
          echo "ERROR: No distributions found in dist/ directory!"
          exit 1
        fi
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: dist/