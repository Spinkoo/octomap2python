name: Release to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:  # Add manual trigger
    inputs:
      version:
        description: 'Version to release (optional)'
        required: false
        default: ''
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        default: false
        type: boolean

jobs:
  build-wheels:
    runs-on: ubuntu-latest
    environment: release
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    # Use manylinux2014 container for better compatibility
    container:
      image: quay.io/pypa/manylinux2014_x86_64:latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Display release info
      run: |
        echo "üöÄ Building Linux wheels for Google Colab compatibility"
        echo "üêç Python version: ${{ matrix.python-version }}"
        echo "üêß Container: manylinux2014"
        if [ -n "${{ github.event.inputs.version }}" ]; then
          echo "üì¶ Version: ${{ github.event.inputs.version }}"
        fi
    
    - name: Install system dependencies
      run: |
        yum install -y cmake3 gcc-c++ make
        # Create symlinks for cmake
        ln -sf /usr/bin/cmake3 /usr/bin/cmake
    
    - name: Set up Python
      run: |
        # Set Python version for this matrix job
        export PYTHON_VERSION="${{ matrix.python-version }}"
        echo "Setting up Python $PYTHON_VERSION"
        
        # Use the Python version from manylinux2014
        PYTHON_BIN="/opt/python/cp${PYTHON_VERSION//./}-cp${PYTHON_VERSION//./}/bin/python"
        PIP_BIN="/opt/python/cp${PYTHON_VERSION//./}-cp${PYTHON_VERSION//./}/bin/pip"
        
        $PYTHON_BIN -m pip install --upgrade pip
        $PIP_BIN install setuptools wheel numpy cython auditwheel
        
        # Create symlinks for easier access
        ln -sf $PYTHON_BIN /usr/local/bin/python
        ln -sf $PIP_BIN /usr/local/bin/pip
    
    - name: Build OctoMap C++ library
      run: |
        cd src/octomap
        mkdir -p build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)
        make install
        ldconfig
    
    - name: Build wheel
      run: |
        python setup.py bdist_wheel
        echo "Built wheel:"
        ls -la dist/*.whl
    
    - name: Check wheel contents and symbols
      run: |
        echo "Checking wheel contents:"
        unzip -l dist/*.whl
        echo "Checking for problematic symbols:"
        auditwheel show dist/*.whl || echo "auditwheel show failed, continuing..."
    
    - name: Repair wheel for manylinux2014 compatibility
      run: |
        mkdir -p wheelhouse
        echo "Attempting to repair wheel for manylinux2014..."
        auditwheel repair dist/*.whl --plat manylinux2014_x86_64 -w wheelhouse/ || {
          echo "manylinux2014 failed, trying manylinux1..."
          auditwheel repair dist/*.whl --plat manylinux1_x86_64 -w wheelhouse/ || {
            echo "manylinux1 failed, using original wheel"
            cp dist/*.whl wheelhouse/
          }
        }
        echo "Final wheels in wheelhouse:"
        ls -la wheelhouse/
    
    - name: Upload wheel
      uses: actions/upload-artifact@v4
      with:
        name: wheel-py${{ matrix.python-version }}
        path: ./wheelhouse/*.whl

  build-sdist:
    runs-on: ubuntu-latest
    environment: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel numpy cython
    
    - name: Generate PyPI README
      run: |
        python github2pypi/generate_pypi_readme.py
        
        if [ -f "README_pypi_preview.md" ]; then
          echo "‚úÖ PyPI README generated successfully"
        else
          echo "‚ùå PyPI README generation failed"
          exit 1
        fi
    
    - name: Build source distribution
      run: |
        python setup.py sdist
    
    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  publish:
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment: release
    
    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v4
      with:
        pattern: wheel-py*
        path: ./wheelhouse
        merge-multiple: true
    
    - name: Download source distribution
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: ./dist
    
    - name: List downloaded files
      run: |
        echo "Wheels:"
        find ./wheelhouse -name "*.whl" -type f
        echo "Source distributions:"
        find ./dist -name "*.tar.gz" -type f
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: .