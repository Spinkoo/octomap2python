name: Build and Publish to PyPI

on:
  # Trigger on pushes to main branch
  push:
    branches: [ main ]
  # Trigger on pull requests
  pull_request:
    branches: [ main ]
  # Trigger on releases
  release:
    types: [published]
  # Allow manual trigger
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive  # Important: fetch OctoMap submodule
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
    
    - name: Build OctoMap C++ library
      run: |
        cd src/octomap
        mkdir build
        cd build
        cmake ..
        make -j$(nproc)
        sudo make install
        sudo ldconfig
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel numpy cython pytest
    
    - name: Test github2pypi conversion
      run: |
        python -c "
        from github2pypi import replace_url
        with open('README.md', 'r') as f:
            content = f.read()
        converted = replace_url('Spinkoo/octomap2python', content)
        print('✅ GitHub2PyPI conversion successful')
        print(f'Converted {len(content)} chars to {len(converted)} chars')
        "
    
    - name: Build wheel
      run: |
        python setup.py bdist_wheel
    
    - name: Install built wheel
      run: |
        pip install dist/*.whl
    
    - name: Test import
      run: |
        mv octomap _octomap_source
        python -c "
        import octomap
        print('✅ OctoMap import successful!')
        tree = octomap.OcTree(0.1)
        tree.updateNode([1.0, 2.0, 3.0], True)
        node = tree.search([1.0, 2.0, 3.0])
        if node and tree.isNodeOccupied(node):
            print('✅ Basic functionality working!')
        else:
            raise Exception('Basic functionality test failed!')
        "
        mv _octomap_source octomap
    
    - name: Run unit tests (if they exist)
      run: |
        if [ -d "unit_test" ]; then
          mv octomap _octomap_source
          python -m pytest unit_test/ -v
          mv _octomap_source octomap
        else
          echo "No unit tests found, skipping..."
        fi

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
    
    - name: Build OctoMap C++ library
      run: |
        cd src/octomap
        mkdir build
        cd build
        cmake ..
        make -j$(nproc)
        sudo make install
        sudo ldconfig
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel numpy cython
    
    - name: Build distributions
      run: |
        python setup.py sdist bdist_wheel
    
    - name: Check distributions
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distributions
        path: dist/

  publish-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: distributions
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  publish-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: release
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: distributions
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  update-readme:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Generate PyPI-ready README
      run: |
        python -c "
        from github2pypi import replace_url
        with open('README.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        converted = replace_url('Spinkoo/octomap2python', content, branch='main')
        
        with open('README_PyPI.md', 'w', encoding='utf-8') as f:
            f.write(converted)
        
        print('✅ Generated README_PyPI.md with absolute GitHub URLs')
        "
    
    - name: Upload PyPI README artifact
      uses: actions/upload-artifact@v4
      with:
        name: readme-pypi
        path: README_PyPI.md
