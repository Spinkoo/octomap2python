name: Build and Publish to PyPI

on:
  # Trigger on pushes to main branch
  push:
    branches: [ main ]
  # Trigger on pull requests
  pull_request:
    branches: [ main ]
  # Allow manual trigger
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive  # Important: fetch OctoMap submodule
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
    
    - name: Build OctoMap C++ library
      run: |
        cd src/octomap
        # Clean any existing build directory to avoid CMake cache issues
        rm -rf build
        mkdir build
        cd build
        cmake ..
        make -j$(nproc)
        sudo make install
        sudo ldconfig
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel numpy cython pytest
    
    - name: Test github2pypi conversion
      run: |
        python -c "
        from github2pypi import replace_url
        with open('README.md', 'r') as f:
            content = f.read()
        converted = replace_url('Spinkoo/pyoctomap', content)
        print('✅ GitHub2PyPI conversion successful')
        print(f'Converted {len(content)} chars to {len(converted)} chars')
        "
    
    - name: Build wheel
      run: |
        python setup.py bdist_wheel
    
    - name: Install built wheel
      run: |
        pip install dist/*.whl
    
    - name: Test import
      run: |
        mv pyoctomap _pyoctomap_source
        python -c "
        import pyoctomap
        print('✅ PyOctoMap import successful!')
        tree = pyoctomap.OcTree(0.1)
        tree.updateNode([1.0, 2.0, 3.0], True)
        node = tree.search([1.0, 2.0, 3.0])
        if node and tree.isNodeOccupied(node):
            print('✅ Basic functionality working!')
        else:
            raise Exception('Basic functionality test failed!')
        "
        mv _pyoctomap_source pyoctomap
    
    - name: Run unit tests (if they exist)
      run: |
        if [ -d "unit_test" ]; then
          mv pyoctomap _pyoctomap_source
          python -m pytest unit_test/ -v
          mv _pyoctomap_source pyoctomap
        else
          echo "No unit tests found, skipping..."
        fi

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Cache OctoMap C++ build
      uses: actions/cache@v3
      with:
        path: src/octomap/build
        key: octomap-cpp-${{ runner.os }}-${{ hashFiles('src/octomap/**/*.cpp', 'src/octomap/**/*.h', 'src/octomap/**/CMakeLists.txt') }}
        restore-keys: |
          octomap-cpp-${{ runner.os }}-
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml', '**/setup.py') }}
        restore-keys: |
          pip-${{ runner.os }}-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
    
    - name: Build OctoMap C++ library
      run: |
        cd src/octomap
        # Check if cached build has correct paths (handle repo name change)
        if [ -d "build" ] && [ -f "build/CMakeCache.txt" ]; then
          if grep -q "/__w/pyoctomap/pyoctomap" build/CMakeCache.txt 2>/dev/null; then
            echo "✅ Using cached OctoMap C++ build"
            cd build
            make -j$(nproc)
            sudo make install
            sudo ldconfig
          else
            echo "⚠️  Cached build has old paths, rebuilding..."
            rm -rf build
            mkdir -p build
            cd build
            cmake ..
            make -j$(nproc)
            sudo make install
            sudo ldconfig
          fi
        else
          echo "🔨 Building OctoMap C++ library from scratch..."
          mkdir -p build
          cd build
          cmake ..
          make -j$(nproc)
          sudo make install
          sudo ldconfig
        fi
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel numpy cython
    
    - name: Build distributions
      run: |
        # Clean any previous builds
        rm -rf build/ dist/ *.egg-info/
        # Build both wheel and source distribution
        python setup.py bdist_wheel sdist
        
        # Fix platform tags for PyPI compatibility using auditwheel
        pip install auditwheel
        
        # Create repaired wheels directory
        mkdir -p wheelhouse
        
        # Repair wheels for manylinux1 compatibility (better compatibility)
        for wheel in dist/*.whl; do
          if [[ -f "$wheel" ]]; then
            echo "Repairing wheel: $wheel"
            auditwheel repair "$wheel" -w wheelhouse/ --plat manylinux1_x86_64 || {
              echo "auditwheel failed, trying manual tag fix..."
              cp "$wheel" wheelhouse/
              cd wheelhouse
              python -c "import os; [os.rename(f, f.replace('linux_x86_64', 'manylinux1_x86_64')) for f in os.listdir('.') if f.endswith('.whl') and 'linux_x86_64' in f]; print('Fixed platform tags')"
              cd ..
            }
          fi
        done
        
        # Replace original wheels with repaired ones
        rm -f dist/*.whl
        cp wheelhouse/*.whl dist/ 2>/dev/null || echo "No wheels to copy"
        
        echo "Final distributions:"
        ls -la dist/
    
    - name: Check distributions
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distributions
        path: dist/

  publish-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Install twine
      run: |
        python -m pip install --upgrade pip
        pip install twine
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: distributions
        path: dist/
    
    - name: Publish to Test PyPI
      run: |
        echo "📦 Publishing to TestPyPI using twine..."
        echo "🔑 Using API token authentication"
        python -m twine upload \
          --repository-url https://test.pypi.org/legacy/ \
          --username __token__ \
          --password "${{ secrets.TEST_PYPI_API_TOKEN }}" \
          --skip-existing \
          --verbose \
          dist/*

  update-readme:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Generate PyPI-ready README
      run: |
        python -c "
        from github2pypi import replace_url
        with open('README.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        converted = replace_url('Spinkoo/pyoctomap', content, branch='main')
        
        with open('README_PyPI.md', 'w', encoding='utf-8') as f:
            f.write(converted)
        
        print('✅ Generated README_PyPI.md with absolute GitHub URLs')
        "
    
    - name: Upload PyPI README artifact
      uses: actions/upload-artifact@v4
      with:
        name: readme-pypi
        path: README_PyPI.md