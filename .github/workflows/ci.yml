name: CI Tests

on:
  push:
    branches: [ main, develop, Lisa ]
  pull_request:
    branches: [ main, develop, Lisa ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    # Use Ubuntu 24.04 container with newer GLIBC
    container:
      image: ubuntu:24.04
      options: --user root
    
    steps:
    - name: Install system dependencies and Python
      run: |
        apt-get update
        apt-get install -y git build-essential cmake pkg-config \
          libqt5opengl5-dev libqglviewer-dev-qt5 libeigen3-dev \
          libboost-all-dev \
          python3 python3-pip python3-dev python3-venv
    
    - name: Set up Python virtual environment
      run: |
        python3 -m venv /opt/venv
        echo "/opt/venv/bin" >> $GITHUB_PATH
        echo "VIRTUAL_ENV=/opt/venv" >> $GITHUB_ENV
    
    - name: Checkout code with submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cache OctoMap C++ build
      uses: actions/cache@v3
      with:
        path: |
          src/octomap/build
          src/octomap/lib
        key: octomap-cpp-${{ runner.os }}-${{ hashFiles('src/octomap/**/*.cpp', 'src/octomap/**/*.h', 'src/octomap/**/CMakeLists.txt') }}
        restore-keys: |
          octomap-cpp-${{ runner.os }}-
    
    - name: Build OctoMap from source
      run: |
        cd src/octomap
        # Check if cached build has correct paths (handle repo name change)
        if [ -d "build" ] && [ -f "build/CMakeCache.txt" ]; then
          if grep -q "/__w/pyoctomap/pyoctomap" build/CMakeCache.txt 2>/dev/null; then
            echo "‚úÖ Using cached OctoMap C++ build"
            cd build
            make -j$(nproc)
            make install
            ldconfig
          else
            echo "‚ö†Ô∏è  Cached build has old paths, rebuilding..."
            rm -rf build
            mkdir -p build
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Release
            make -j$(nproc)
            make install
            ldconfig
          fi
        else
          echo "üî® Building OctoMap C++ library from scratch..."
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          make -j$(nproc)
          make install
          ldconfig
        fi
    
    - name: Install Python build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel numpy cython pytest
    
    - name: Build and install package
      run: |
        # Build wheel and install it
        python setup.py bdist_wheel
        
        # Debug: Check what was built
        echo "=== Checking built wheel ==="
        ls -la dist/
        unzip -l dist/*.whl | grep -E '\.(so|dylib|dll)' || echo "No shared libraries found in wheel"
        
        pip install dist/*.whl

    - name: Run comprehensive tests
      run: |
        # Temporarily rename source directory to avoid import shadowing
        mv pyoctomap _pyoctomap_source
        python -m pytest unit_test/test_build.py -v
        mv _pyoctomap_source pyoctomap
    
    - name: Run additional unit tests
      run: |
        # Run other unit tests (excluding test_build.py which we already ran)
        mv pyoctomap _pyoctomap_source
        python -m pytest unit_test/ --ignore=unit_test/test_build.py -v --tb=short
        mv _pyoctomap_source pyoctomap
    
    - name: Install visualization dependencies for examples
      run: |
        pip install open3d matplotlib
    
    - name: Test examples (if they exist)
      run: |
        if [ -f "examples/basic_test.py" ]; then
          echo "üß™ Testing basic example..."
          mv pyoctomap _pyoctomap_source
          cd examples
          python basic_test.py
          cd ..
          mv _pyoctomap_source pyoctomap
        else
          echo "‚ÑπÔ∏è  No basic test example found"
        fi